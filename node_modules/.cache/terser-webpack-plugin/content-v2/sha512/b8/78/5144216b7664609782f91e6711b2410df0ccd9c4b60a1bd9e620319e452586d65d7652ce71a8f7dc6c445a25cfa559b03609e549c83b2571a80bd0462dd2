{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[466],{862:function(t,a,e){\"use strict\";e.r(a);var s=e(55),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"概览\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概览\"}},[t._v(\"#\")]),t._v(\" 概览\")]),t._v(\" \"),e(\"p\",[t._v(\"动态规划往往是最能有效考察算法和设计能力的题目类型，面对这类题目最重要的是抓住问题的阶段，了解每个阶段的状态，从而分析阶段之间的关系转化。\")]),t._v(\" \"),e(\"p\",[t._v(\"适用于动态规划的问题，需要满足最优子结构和无后效性，动态规划的求解过程，在于找到状态转移方程，进行自底向上的求解。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://gitee.com/wddzhahaha/images/raw/master/img/3roOnqlBDEP5RZN.jpg\",alt:\"img\"}})]),t._v(\" \"),e(\"p\",[t._v(\"自底向上的求解，可以帮你省略大量的复杂计算，例如上面的斐波拉契数列，使用递归的话时间复杂度会呈指数型增长，而动态规划则让此算法的时间复杂度保持在\"),e(\"code\",[t._v(\"O(n)\")])])])}),[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}